"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDebounceCallback = void 0;
var react_1 = require("react");
var lodash_debounce_1 = __importDefault(require("lodash.debounce"));
var useUnmount_1 = require("../useUnmount");
/**
 * Hook to create a debounced version of a callback function.
 * @template T - Type of the original callback function.
 * @param {T} func - The callback function to be debounced.
 * @param {number} delay - The delay in milliseconds before the callback is invoked (default is `500` milliseconds).
 * @param {DebounceOptions} [options] - Options to control the behavior of the debounced function.
 * @returns {DebouncedState<T>} A debounced version of the original callback along with control functions.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-debounce-callback)
 * @example
 * const debouncedCallback = useDebounceCallback(
 *   (searchTerm) => {
 *     // Perform search after user stops typing for 500 milliseconds
 *     searchApi(searchTerm);
 *   },
 *   500
 * );
 *
 * // Later in the component
 * debouncedCallback('react hooks'); // Will invoke the callback after 500 milliseconds of inactivity.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function useDebounceCallback(func, delay, options) {
    if (delay === void 0) { delay = 500; }
    var debouncedFunc = (0, react_1.useRef)();
    (0, useUnmount_1.useUnmount)(function () {
        if (debouncedFunc.current) {
            debouncedFunc.current.cancel();
        }
    });
    var debounced = (0, react_1.useMemo)(function () {
        var debouncedFuncInstance = (0, lodash_debounce_1.default)(func, delay, options);
        var wrappedFunc = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return debouncedFuncInstance.apply(void 0, args);
        };
        wrappedFunc.cancel = function () {
            debouncedFuncInstance.cancel();
        };
        wrappedFunc.isPending = function () {
            return !!debouncedFunc.current;
        };
        wrappedFunc.flush = function () {
            return debouncedFuncInstance.flush();
        };
        return wrappedFunc;
    }, [func, delay, options]);
    // Update the debounced function ref whenever func, wait, or options change
    (0, react_1.useEffect)(function () {
        debouncedFunc.current = (0, lodash_debounce_1.default)(func, delay, options);
    }, [func, delay, options]);
    return debounced;
}
exports.useDebounceCallback = useDebounceCallback;
