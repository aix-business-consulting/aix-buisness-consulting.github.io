"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useBoolean = void 0;
var react_1 = require("react");
/**
 * Custom hook for handling boolean state with useful utility functions.
 * @param {boolean} [defaultValue] - The initial value for the boolean state (default is `false`).
 * @returns {UseBooleanOutput} An object containing the boolean state value and utility functions to manipulate the state.
 * @property {boolean} value - The current boolean state value.
 * @property {Function} setValue - Function to set the boolean state directly.
 * @property {Function} setTrue - Function to set the boolean state to `true`.
 * @property {Function} setFalse - Function to set the boolean state to `false`.
 * @property {Function} toggle - Function to toggle the boolean state.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-boolean)
 * @example
 * const { value, setTrue, setFalse, toggle } = useBoolean(true);
 *
 * console.log(value); // true
 * setFalse();
 * console.log(value); // false
 * toggle();
 * console.log(value); // true
 */
function useBoolean(defaultValue) {
    var _a = (0, react_1.useState)(!!defaultValue), value = _a[0], setValue = _a[1];
    var setTrue = (0, react_1.useCallback)(function () {
        setValue(true);
    }, []);
    var setFalse = (0, react_1.useCallback)(function () {
        setValue(false);
    }, []);
    var toggle = (0, react_1.useCallback)(function () {
        setValue(function (x) { return !x; });
    }, []);
    return { value: value, setValue: setValue, setTrue: setTrue, setFalse: setFalse, toggle: toggle };
}
exports.useBoolean = useBoolean;
