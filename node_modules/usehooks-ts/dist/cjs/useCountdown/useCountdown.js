"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCountdown = void 0;
var react_1 = require("react");
var useBoolean_1 = require("../useBoolean");
var useCounter_1 = require("../useCounter");
var useInterval_1 = require("../useInterval");
/**
 * A hook to manage countdown
 * @param  {CountdownOptions | LegacyCountdownOptions} countdownOptions the countdown's options.
 * @returns {[number, CountdownControllers | LegacyCountdownControllers]} An array containing the countdown's count and its controllers.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-countdown)
 */
function useCountdown(countdownOptions) {
    /**
     * Use to determine the the API call is a deprecated version.
     */
    var isDeprecated = false;
    var countStart, intervalMs, isIncrement, countStop;
    if ('seconds' in countdownOptions) {
        console.warn('[useCountdown:DEPRECATED] new interface is already available (see https://usehooks-ts.com/react-hook/use-countdown), the old version will retire on usehooks-ts@3.');
        isDeprecated = true;
        countStart = countdownOptions.seconds;
        intervalMs = countdownOptions.interval;
        isIncrement = countdownOptions.isIncrement;
    }
    else {
        // eslint-disable-next-line @typescript-eslint/no-extra-semi, no-extra-semi
        ;
        (countStart = countdownOptions.countStart, intervalMs = countdownOptions.intervalMs, isIncrement = countdownOptions.isIncrement, countStop = countdownOptions.countStop);
    }
    // default values
    intervalMs = intervalMs !== null && intervalMs !== void 0 ? intervalMs : 1000;
    isIncrement = isIncrement !== null && isIncrement !== void 0 ? isIncrement : false;
    countStop = countStop !== null && countStop !== void 0 ? countStop : 0;
    var _a = (0, useCounter_1.useCounter)(countStart), count = _a.count, increment = _a.increment, decrement = _a.decrement, resetCounter = _a.reset;
    /**
     * Note: used to control the useInterval
     * running: If true, the interval is running
     * start: Should set running true to trigger interval
     * stop: Should set running false to remove interval
     */
    var _b = (0, useBoolean_1.useBoolean)(false), isCountdownRunning = _b.value, startCountdown = _b.setTrue, stopCountdown = _b.setFalse;
    /**
     * Will set running false and reset the seconds to initial value
     */
    var resetCountdown = function () {
        stopCountdown();
        resetCounter();
    };
    var countdownCallback = (0, react_1.useCallback)(function () {
        if (count === countStop) {
            stopCountdown();
            return;
        }
        if (isIncrement) {
            increment();
        }
        else {
            decrement();
        }
    }, [count, countStop, decrement, increment, isIncrement, stopCountdown]);
    (0, useInterval_1.useInterval)(countdownCallback, isCountdownRunning ? intervalMs : null);
    return isDeprecated
        ? [
            count,
            {
                start: startCountdown,
                stop: stopCountdown,
                reset: resetCountdown,
            },
        ]
        : [
            count,
            {
                startCountdown: startCountdown,
                stopCountdown: stopCountdown,
                resetCountdown: resetCountdown,
            },
        ];
}
exports.useCountdown = useCountdown;
