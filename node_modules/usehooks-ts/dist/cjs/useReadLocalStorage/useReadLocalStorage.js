"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useReadLocalStorage = void 0;
var react_1 = require("react");
var useEventListener_1 = require("../useEventListener");
var IS_SERVER = typeof window === 'undefined';
/**
 * Custom hook for reading a value from local storage, closely related to useLocalStorage().
 * @template T - The type of the stored value.
 * @param {string} key - The key associated with the value in local storage.
 * @param {Options<T>} [options] - Additional options for reading the value (optional).
 * @param {(value: string) => T} [options.deserializer] - Custom deserializer function to convert the stored string value to the desired type (optional).
 * @param {?boolean} [options.initializeWithValue] - If `true` (default), the hook will initialize reading the local storage. In SSR, you should set it to `false`, returning `undefined` initially.
 * @returns {Value<T> | undefined} The stored value, or null if the key is not present or an error occurs.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-read-local-storage)
 * @example
 * const storedData = useReadLocalStorage('myKey');
 * // Access the stored data from local storage.
 */
function useReadLocalStorage(key, options) {
    if (options === void 0) { options = {}; }
    var _a = options.initializeWithValue, initializeWithValue = _a === void 0 ? true : _a;
    if (IS_SERVER) {
        initializeWithValue = false;
    }
    var deserializer = (0, react_1.useCallback)(function (value) {
        if (options.deserializer) {
            return options.deserializer(value);
        }
        // Support 'undefined' as a value
        if (value === 'undefined') {
            return undefined;
        }
        var parsed;
        try {
            parsed = JSON.parse(value);
        }
        catch (error) {
            console.error('Error parsing JSON:', error);
            return null;
        }
        return parsed;
    }, [options]);
    // Get from local storage then
    // parse stored json or return initialValue
    var readValue = (0, react_1.useCallback)(function () {
        // Prevent build error "window is undefined" but keep keep working
        if (IS_SERVER) {
            return null;
        }
        try {
            var raw = window.localStorage.getItem(key);
            return raw ? deserializer(raw) : null;
        }
        catch (error) {
            console.warn("Error reading localStorage key \u201C".concat(key, "\u201D:"), error);
            return null;
        }
    }, [key, deserializer]);
    var _b = (0, react_1.useState)(function () {
        if (initializeWithValue) {
            return readValue();
        }
        return undefined;
    }), storedValue = _b[0], setStoredValue = _b[1];
    // Listen if localStorage changes
    (0, react_1.useEffect)(function () {
        setStoredValue(readValue());
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [key]);
    var handleStorageChange = (0, react_1.useCallback)(function (event) {
        if ((event === null || event === void 0 ? void 0 : event.key) && event.key !== key) {
            return;
        }
        setStoredValue(readValue());
    }, [key, readValue]);
    // this only works for other documents, not the current one
    (0, useEventListener_1.useEventListener)('storage', handleStorageChange);
    // this is a custom event, triggered in writeValueToLocalStorage
    // See: useLocalStorage()
    (0, useEventListener_1.useEventListener)('local-storage', handleStorageChange);
    return storedValue;
}
exports.useReadLocalStorage = useReadLocalStorage;
