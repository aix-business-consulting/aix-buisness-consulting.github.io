"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useScreen = void 0;
var react_1 = require("react");
var useEventListener_1 = require("../useEventListener");
var useIsomorphicLayoutEffect_1 = require("../useIsomorphicLayoutEffect");
var IS_SERVER = typeof window === 'undefined';
/**
 * Custom hook for tracking the screen dimensions and properties.
 * @param {?UseScreenOptions} [options] - The options for customizing the behavior of the hook (optional).
 * @param {?boolean} [options.initializeWithValue] - If `true` (default), the hook will initialize reading the screen dimensions. In SSR, you should set it to `false`, returning `undefined` initially.
 * @returns {Screen | undefined} The current `Screen` object representing the screen dimensions and properties, or `undefined` if not available.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-screen)
 * @example
 * const currentScreen = useScreen();
 * // Access properties of the current screen, such as width and height.
 */
function useScreen(options) {
    if (options === void 0) { options = {}; }
    var _a = options.initializeWithValue, initializeWithValue = _a === void 0 ? true : _a;
    if (IS_SERVER) {
        initializeWithValue = false;
    }
    var _b = (0, react_1.useState)(function () {
        if (initializeWithValue) {
            return window.screen;
        }
        return undefined;
    }), screen = _b[0], setScreen = _b[1];
    /** Handles the resize event of the window. */
    function handleSize() {
        setScreen(window.screen);
    }
    // TODO: Prefer incoming useResizeObserver hook
    (0, useEventListener_1.useEventListener)('resize', handleSize);
    // Set size at the first client-side load
    (0, useIsomorphicLayoutEffect_1.useIsomorphicLayoutEffect)(function () {
        handleSize();
    }, []);
    return screen;
}
exports.useScreen = useScreen;
