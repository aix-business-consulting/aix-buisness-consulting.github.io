"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useDarkMode = void 0;
var useLocalStorage_1 = require("../useLocalStorage");
var useMediaQuery_1 = require("../useMediaQuery");
var useUpdateEffect_1 = require("../useUpdateEffect");
var COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';
var LOCAL_STORAGE_KEY = 'usehooks-ts-dark-mode';
/**
 * Custom hook that returns the current state of the dark mode.
 * @param  {?boolean | ?DarkModeOptions} [options] - the initial value of the dark mode, default `false`.
 * @param  {?boolean} [options.defaultValue] - the initial value of the dark mode, default `false`.
 * @param  {?string} [options.localStorageKey] - the key to use in the local storage, default `'usehooks-ts-dark-mode'`.
 * @param  {?boolean} [options.initializeWithValue] - if `true` (default), the hook will initialize reading `localStorage`. In SSR, you should set it to `false`, returning `undefined` or the `defaultValue` initially.
 * @param  {?string} [localStorageKeyProps] the key to use in the local storage, default `'usehooks-ts-dark-mode'`.
 * @returns {DarkModeOutput} An object containing the dark mode's state and its controllers.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-dark-mode)
 * @example
 * const { isDarkMode, toggle, enable, disable, set } = useDarkMode({ defaultValue: true });
 */
function useDarkMode(options, localStorageKeyProps) {
    var _a, _b, _c, _d;
    if (localStorageKeyProps === void 0) { localStorageKeyProps = LOCAL_STORAGE_KEY; }
    // TODO: Refactor this code after the deprecated signature has been removed.
    var defaultValue = typeof options === 'boolean' ? options : (_a = options === null || options === void 0 ? void 0 : options.defaultValue) !== null && _a !== void 0 ? _a : false;
    var localStorageKey = typeof options === 'boolean'
        ? localStorageKeyProps !== null && localStorageKeyProps !== void 0 ? localStorageKeyProps : LOCAL_STORAGE_KEY
        : (_b = options === null || options === void 0 ? void 0 : options.localStorageKey) !== null && _b !== void 0 ? _b : LOCAL_STORAGE_KEY;
    var initializeWithValue = typeof options === 'boolean'
        ? undefined
        : (_c = options === null || options === void 0 ? void 0 : options.initializeWithValue) !== null && _c !== void 0 ? _c : undefined;
    var isDarkOS = (0, useMediaQuery_1.useMediaQuery)(COLOR_SCHEME_QUERY);
    var _e = (0, useLocalStorage_1.useLocalStorage)(localStorageKey, (_d = defaultValue !== null && defaultValue !== void 0 ? defaultValue : isDarkOS) !== null && _d !== void 0 ? _d : false, { initializeWithValue: initializeWithValue }), isDarkMode = _e[0], setDarkMode = _e[1];
    // Update darkMode if os prefers changes
    (0, useUpdateEffect_1.useUpdateEffect)(function () {
        setDarkMode(isDarkOS);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [isDarkOS]);
    return {
        isDarkMode: isDarkMode,
        toggle: function () {
            setDarkMode(function (prev) { return !prev; });
        },
        enable: function () {
            setDarkMode(true);
        },
        disable: function () {
            setDarkMode(false);
        },
        set: function (value) {
            setDarkMode(value);
        },
    };
}
exports.useDarkMode = useDarkMode;
