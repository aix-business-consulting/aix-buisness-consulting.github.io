"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useElementSize = void 0;
var react_1 = require("react");
var useEventListener_1 = require("../useEventListener");
var useIsomorphicLayoutEffect_1 = require("../useIsomorphicLayoutEffect");
var IS_SERVER = typeof window === 'undefined';
/**
 * A hook for tracking the size of a DOM element.
 * @template T - The type of the DOM element. Defaults to `HTMLDivElement`.
 * @param {?UseElementSizeOptions} [options] - The options for customizing the behavior of the hook (optional).
 * @param {?boolean} [options.initializeWithValue] - If `true` (default), the hook will initialize reading the element's size. In SSR, you should set it to `false`, returning `{ width: 0, height: 0 }` initially.
 * @returns {[ (node: T | null) => void, Size ]} A tuple containing a ref-setting function and the size of the element.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-element-size)
 * @example
 * const [ref, size] = useElementSize();
 *
 * return (
 *   <div ref={ref}>
 *     My size is {size.width}x{size.height}
 *   </div>
 * );
 */
function useElementSize(options) {
    if (options === void 0) { options = {}; }
    var _a = options.initializeWithValue, initializeWithValue = _a === void 0 ? true : _a;
    if (IS_SERVER) {
        initializeWithValue = false;
    }
    // Mutable values like 'ref.current' aren't valid dependencies
    // because mutating them doesn't re-render the component.
    // Instead, we use a state as a ref to be reactive.
    var _b = (0, react_1.useState)(null), ref = _b[0], setRef = _b[1];
    var readValue = (0, react_1.useCallback)(function () {
        var _a, _b;
        return {
            width: (_a = ref === null || ref === void 0 ? void 0 : ref.offsetWidth) !== null && _a !== void 0 ? _a : 0,
            height: (_b = ref === null || ref === void 0 ? void 0 : ref.offsetHeight) !== null && _b !== void 0 ? _b : 0,
        };
    }, [ref === null || ref === void 0 ? void 0 : ref.offsetHeight, ref === null || ref === void 0 ? void 0 : ref.offsetWidth]);
    var _c = (0, react_1.useState)(function () {
        if (initializeWithValue) {
            return readValue();
        }
        return { width: 0, height: 0 };
    }), size = _c[0], setSize = _c[1];
    // Prevent too many rendering using useCallback
    var handleSize = (0, react_1.useCallback)(function () {
        setSize(readValue());
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [ref === null || ref === void 0 ? void 0 : ref.offsetHeight, ref === null || ref === void 0 ? void 0 : ref.offsetWidth]);
    // TODO: Prefer incoming useResizeObserver hook
    (0, useEventListener_1.useEventListener)('resize', handleSize);
    (0, useIsomorphicLayoutEffect_1.useIsomorphicLayoutEffect)(function () {
        handleSize();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [ref === null || ref === void 0 ? void 0 : ref.offsetHeight, ref === null || ref === void 0 ? void 0 : ref.offsetWidth]);
    return [setRef, size];
}
exports.useElementSize = useElementSize;
