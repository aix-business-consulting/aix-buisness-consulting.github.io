"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCounter = void 0;
var react_1 = require("react");
/**
 * Custom hook that manages a counter with increment, decrement, reset, and setCount functionalities.
 * @param {number} [initialValue] - The initial value for the counter.
 * @returns {object} An object containing the current count and functions to interact with the counter.
 * @property {number} count - The current count value.
 * @property {Function} increment - Increments the counter by 1.
 * @property {Function} decrement - Decrements the counter by 1.
 * @property {Function} reset - Resets the counter to its initial value.
 * @property {Function} setCount - Function to set a specific value to the counter.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-counter)
 * @example
 * // Usage of useCounter hook
 * const { count, increment, decrement, reset, setCount } = useCounter(5);
 * console.log(`Current count: ${count}`);
 * increment(); // Increases count by 1
 * decrement(); // Decreases count by 1
 * reset(); // Resets count to its initial value
 * setCount(10); // Sets count to 10
 */
function useCounter(initialValue) {
    var _a = (0, react_1.useState)(initialValue !== null && initialValue !== void 0 ? initialValue : 0), count = _a[0], setCount = _a[1];
    var increment = function () {
        setCount(function (x) { return x + 1; });
    };
    var decrement = function () {
        setCount(function (x) { return x - 1; });
    };
    var reset = function () {
        setCount(initialValue !== null && initialValue !== void 0 ? initialValue : 0);
    };
    return {
        count: count,
        increment: increment,
        decrement: decrement,
        reset: reset,
        setCount: setCount,
    };
}
exports.useCounter = useCounter;
