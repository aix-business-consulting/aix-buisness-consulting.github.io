import { Dispatch, SetStateAction } from 'react';
export type TernaryDarkMode = 'system' | 'dark' | 'light';
type TernaryDarkModeOptions<InitializeWithValue extends boolean | undefined> = {
    defaultValue?: TernaryDarkMode;
    localStorageKey?: string;
    initializeWithValue: InitializeWithValue;
};
type ReturnedMethods = {
    setTernaryDarkMode: Dispatch<SetStateAction<TernaryDarkMode>>;
    toggleTernaryDarkMode: () => void;
};
type ReturnedValues = {
    isDarkMode: boolean;
    ternaryDarkMode: TernaryDarkMode;
};
/**
 * Custom hook for managing ternary (system, dark, light) dark mode with local storage support.
 * @deprecated this useTernaryDarkMode's signature is deprecated, it now accepts an options object instead of multiple parameters.
 * @param {string} localStorageKey - The key for storing dark mode preference in local storage (default is `'usehooks-ts-ternary-dark-mode'`).
 * @returns {ReturnedMethods & ReturnedValues} An object containing the dark mode state and helper functions.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-ternary-dark-mode)
 * @example
 * const { isDarkMode, ternaryDarkMode, setTernaryDarkMode, toggleTernaryDarkMode } = useTernaryDarkMode('my-key');
 * // Access and use the dark mode state and provided helper functions.
 */
export declare function useTernaryDarkMode(localStorageKey: string): ReturnedMethods & ReturnedValues;
export declare function useTernaryDarkMode(options: TernaryDarkModeOptions<false>): ReturnedMethods & Partial<ReturnedValues>;
export declare function useTernaryDarkMode(options?: Partial<TernaryDarkModeOptions<true>>): ReturnedMethods & ReturnedValues;
export {};
