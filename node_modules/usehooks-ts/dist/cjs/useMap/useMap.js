"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMap = void 0;
var react_1 = require("react");
/**
 * Custom hook for managing a key-value map state with setter actions.
 * @template K - The type of keys in the map.
 * @template V - The type of values in the map.
 * @param {MapOrEntries<K, V>} [initialState] - The initial state of the map as a Map or an array of key-value pairs (optional).
 * @returns {Return<K, V>} A tuple containing the map state and actions to interact with the map.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-map)
 * @example
 * const [map, mapActions] = useMap();
 * // Access the `map` state and use `mapActions` to set, remove, or reset entries.
 */
function useMap(initialState) {
    if (initialState === void 0) { initialState = new Map(); }
    var _a = (0, react_1.useState)(new Map(initialState)), map = _a[0], setMap = _a[1];
    var actions = {
        set: (0, react_1.useCallback)(function (key, value) {
            setMap(function (prev) {
                var copy = new Map(prev);
                copy.set(key, value);
                return copy;
            });
        }, []),
        setAll: (0, react_1.useCallback)(function (entries) {
            setMap(function () { return new Map(entries); });
        }, []),
        remove: (0, react_1.useCallback)(function (key) {
            setMap(function (prev) {
                var copy = new Map(prev);
                copy.delete(key);
                return copy;
            });
        }, []),
        reset: (0, react_1.useCallback)(function () {
            setMap(function () { return new Map(); });
        }, []),
    };
    return [map, actions];
}
exports.useMap = useMap;
