"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useHover = void 0;
var react_1 = require("react");
var useEventListener_1 = require("../useEventListener");
/**
 * Custom hook for tracking whether a DOM element is being hovered over.
 * @template T - The type of the DOM element. Defaults to `HTMLElement`.
 * @param {RefObject<T>} elementRef - The ref object for the DOM element to track.
 * @returns {boolean} A boolean value indicating whether the element is being hovered over.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-hover)
 * @example
 * const buttonRef = useRef<HTMLButtonElement>(null);
 * const isHovered = useHover(buttonRef);
 * // Access the isHovered variable to determine if the button is being hovered over.
 */
function useHover(elementRef) {
    var _a = (0, react_1.useState)(false), value = _a[0], setValue = _a[1];
    var handleMouseEnter = function () {
        setValue(true);
    };
    var handleMouseLeave = function () {
        setValue(false);
    };
    (0, useEventListener_1.useEventListener)('mouseenter', handleMouseEnter, elementRef);
    (0, useEventListener_1.useEventListener)('mouseleave', handleMouseLeave, elementRef);
    return value;
}
exports.useHover = useHover;
