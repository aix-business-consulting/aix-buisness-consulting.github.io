import { RefObject } from 'react';
/**
 * Custom hook for handling clicks outside a specified element.
 * @template T - The type of the element's reference.
 * @param {RefObject<T>} ref - The React ref object representing the element to watch for outside clicks.
 * @param {(event: MouseEvent) => void} handler - The callback function to be executed when a click outside the element occurs.
 * @param {'mousedown' | 'mouseup'} [mouseEvent] - The mouse event type to listen for (optional, default is 'mousedown').
 * @returns {void}
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-on-click-outside)
 * @example
 * const containerRef = useRef(null);
 * useOnClickOutside(containerRef, () => {
 *   // Handle clicks outside the container.
 * });
 */
export declare function useOnClickOutside<T extends HTMLElement = HTMLElement>(ref: RefObject<T>, handler: (event: MouseEvent) => void, mouseEvent?: 'mousedown' | 'mouseup'): void;
