import { useEffect, useMemo, useRef } from 'react';
import debounce from 'lodash.debounce';
import { useUnmount } from '../useUnmount';
/**
 * Hook to create a debounced version of a callback function.
 * @template T - Type of the original callback function.
 * @param {T} func - The callback function to be debounced.
 * @param {number} delay - The delay in milliseconds before the callback is invoked (default is `500` milliseconds).
 * @param {DebounceOptions} [options] - Options to control the behavior of the debounced function.
 * @returns {DebouncedState<T>} A debounced version of the original callback along with control functions.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-debounce-callback)
 * @example
 * const debouncedCallback = useDebounceCallback(
 *   (searchTerm) => {
 *     // Perform search after user stops typing for 500 milliseconds
 *     searchApi(searchTerm);
 *   },
 *   500
 * );
 *
 * // Later in the component
 * debouncedCallback('react hooks'); // Will invoke the callback after 500 milliseconds of inactivity.
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function useDebounceCallback(func, delay = 500, options) {
    const debouncedFunc = useRef();
    useUnmount(() => {
        if (debouncedFunc.current) {
            debouncedFunc.current.cancel();
        }
    });
    const debounced = useMemo(() => {
        const debouncedFuncInstance = debounce(func, delay, options);
        const wrappedFunc = (...args) => {
            return debouncedFuncInstance(...args);
        };
        wrappedFunc.cancel = () => {
            debouncedFuncInstance.cancel();
        };
        wrappedFunc.isPending = () => {
            return !!debouncedFunc.current;
        };
        wrappedFunc.flush = () => {
            return debouncedFuncInstance.flush();
        };
        return wrappedFunc;
    }, [func, delay, options]);
    // Update the debounced function ref whenever func, wait, or options change
    useEffect(() => {
        debouncedFunc.current = debounce(func, delay, options);
    }, [func, delay, options]);
    return debounced;
}
