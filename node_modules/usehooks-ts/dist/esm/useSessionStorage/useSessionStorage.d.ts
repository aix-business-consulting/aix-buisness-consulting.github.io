import { Dispatch, SetStateAction } from 'react';
declare global {
    interface WindowEventMap {
        'session-storage': CustomEvent;
    }
}
/**
 * Represents the options for customizing the behavior of serialization and deserialization.
 * @template T - The type of the state to be stored in session storage.
 * @interface Options
 * @property {(value: T) => string} [serializer] - A function to serialize the value before storing it.
 * @property {(value: string) => T} [deserializer] - A function to deserialize the stored value.
 */
interface UseSessionStorageOptions<T, InitializeWithValue extends boolean | undefined> {
    serializer?: (value: T) => string;
    deserializer?: (value: string) => T;
    initializeWithValue: InitializeWithValue;
}
export declare function useSessionStorage<T>(key: string, initialValue: T | (() => T), options: UseSessionStorageOptions<T, false>): [T | undefined, Dispatch<SetStateAction<T>>];
export declare function useSessionStorage<T>(key: string, initialValue: T | (() => T), options?: Partial<UseSessionStorageOptions<T, boolean>>): [T, Dispatch<SetStateAction<T>>];
export {};
