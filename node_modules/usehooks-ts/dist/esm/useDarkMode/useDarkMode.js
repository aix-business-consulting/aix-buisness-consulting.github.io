import { useLocalStorage } from '../useLocalStorage';
import { useMediaQuery } from '../useMediaQuery';
import { useUpdateEffect } from '../useUpdateEffect';
const COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';
const LOCAL_STORAGE_KEY = 'usehooks-ts-dark-mode';
/**
 * Custom hook that returns the current state of the dark mode.
 * @param  {?boolean | ?DarkModeOptions} [options] - the initial value of the dark mode, default `false`.
 * @param  {?boolean} [options.defaultValue] - the initial value of the dark mode, default `false`.
 * @param  {?string} [options.localStorageKey] - the key to use in the local storage, default `'usehooks-ts-dark-mode'`.
 * @param  {?boolean} [options.initializeWithValue] - if `true` (default), the hook will initialize reading `localStorage`. In SSR, you should set it to `false`, returning `undefined` or the `defaultValue` initially.
 * @param  {?string} [localStorageKeyProps] the key to use in the local storage, default `'usehooks-ts-dark-mode'`.
 * @returns {DarkModeOutput} An object containing the dark mode's state and its controllers.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-dark-mode)
 * @example
 * const { isDarkMode, toggle, enable, disable, set } = useDarkMode({ defaultValue: true });
 */
export function useDarkMode(options, localStorageKeyProps = LOCAL_STORAGE_KEY) {
    var _a, _b, _c, _d;
    // TODO: Refactor this code after the deprecated signature has been removed.
    const defaultValue = typeof options === 'boolean' ? options : (_a = options === null || options === void 0 ? void 0 : options.defaultValue) !== null && _a !== void 0 ? _a : false;
    const localStorageKey = typeof options === 'boolean'
        ? localStorageKeyProps !== null && localStorageKeyProps !== void 0 ? localStorageKeyProps : LOCAL_STORAGE_KEY
        : (_b = options === null || options === void 0 ? void 0 : options.localStorageKey) !== null && _b !== void 0 ? _b : LOCAL_STORAGE_KEY;
    const initializeWithValue = typeof options === 'boolean'
        ? undefined
        : (_c = options === null || options === void 0 ? void 0 : options.initializeWithValue) !== null && _c !== void 0 ? _c : undefined;
    const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY);
    const [isDarkMode, setDarkMode] = useLocalStorage(localStorageKey, (_d = defaultValue !== null && defaultValue !== void 0 ? defaultValue : isDarkOS) !== null && _d !== void 0 ? _d : false, { initializeWithValue });
    // Update darkMode if os prefers changes
    useUpdateEffect(() => {
        setDarkMode(isDarkOS);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [isDarkOS]);
    return {
        isDarkMode,
        toggle: () => {
            setDarkMode(prev => !prev);
        },
        enable: () => {
            setDarkMode(true);
        },
        disable: () => {
            setDarkMode(false);
        },
        set: value => {
            setDarkMode(value);
        },
    };
}
