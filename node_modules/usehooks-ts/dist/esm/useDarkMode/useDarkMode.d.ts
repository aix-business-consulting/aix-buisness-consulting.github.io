type DarkModeOptions<InitializeWithValue extends boolean | undefined> = {
    defaultValue?: boolean;
    localStorageKey?: string;
    initializeWithValue: InitializeWithValue;
};
interface DarkModeOutput<T extends boolean | undefined> {
    isDarkMode: T;
    toggle: () => void;
    enable: () => void;
    disable: () => void;
    set: (value: boolean) => void;
}
/**
 * Custom hook that returns the current state of the dark mode.
 * @deprecated this useDarkMode's signature is deprecated, it now accepts an options object instead of multiple parameters.
 * @param  {boolean} defaultValue the initial value of the dark mode, default `false`.
 * @param  {string} [localStorageKey] the key to use in the local storage, default `'usehooks-ts-dark-mode'`.
 * @returns {DarkModeOutput} An object containing the dark mode's state and its controllers.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-dark-mode)
 * @example
 * const { isDarkMode, toggle, enable, disable, set } = useDarkMode(false, 'my-key');
 */
export declare function useDarkMode(defaultValue: boolean, localStorageKey?: string): DarkModeOutput<boolean>;
export declare function useDarkMode(options: DarkModeOptions<false>): DarkModeOutput<boolean | undefined>;
export declare function useDarkMode(options?: Partial<DarkModeOptions<true>>): DarkModeOutput<boolean>;
export {};
