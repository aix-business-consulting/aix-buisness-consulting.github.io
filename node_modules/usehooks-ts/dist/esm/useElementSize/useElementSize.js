import { useCallback, useState } from 'react';
import { useEventListener } from '../useEventListener';
import { useIsomorphicLayoutEffect } from '../useIsomorphicLayoutEffect';
const IS_SERVER = typeof window === 'undefined';
/**
 * A hook for tracking the size of a DOM element.
 * @template T - The type of the DOM element. Defaults to `HTMLDivElement`.
 * @param {?UseElementSizeOptions} [options] - The options for customizing the behavior of the hook (optional).
 * @param {?boolean} [options.initializeWithValue] - If `true` (default), the hook will initialize reading the element's size. In SSR, you should set it to `false`, returning `{ width: 0, height: 0 }` initially.
 * @returns {[ (node: T | null) => void, Size ]} A tuple containing a ref-setting function and the size of the element.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-element-size)
 * @example
 * const [ref, size] = useElementSize();
 *
 * return (
 *   <div ref={ref}>
 *     My size is {size.width}x{size.height}
 *   </div>
 * );
 */
export function useElementSize(options = {}) {
    let { initializeWithValue = true } = options;
    if (IS_SERVER) {
        initializeWithValue = false;
    }
    // Mutable values like 'ref.current' aren't valid dependencies
    // because mutating them doesn't re-render the component.
    // Instead, we use a state as a ref to be reactive.
    const [ref, setRef] = useState(null);
    const readValue = useCallback(() => {
        var _a, _b;
        return {
            width: (_a = ref === null || ref === void 0 ? void 0 : ref.offsetWidth) !== null && _a !== void 0 ? _a : 0,
            height: (_b = ref === null || ref === void 0 ? void 0 : ref.offsetHeight) !== null && _b !== void 0 ? _b : 0,
        };
    }, [ref === null || ref === void 0 ? void 0 : ref.offsetHeight, ref === null || ref === void 0 ? void 0 : ref.offsetWidth]);
    const [size, setSize] = useState(() => {
        if (initializeWithValue) {
            return readValue();
        }
        return { width: 0, height: 0 };
    });
    // Prevent too many rendering using useCallback
    const handleSize = useCallback(() => {
        setSize(readValue());
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [ref === null || ref === void 0 ? void 0 : ref.offsetHeight, ref === null || ref === void 0 ? void 0 : ref.offsetWidth]);
    // TODO: Prefer incoming useResizeObserver hook
    useEventListener('resize', handleSize);
    useIsomorphicLayoutEffect(() => {
        handleSize();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [ref === null || ref === void 0 ? void 0 : ref.offsetHeight, ref === null || ref === void 0 ? void 0 : ref.offsetWidth]);
    return [setRef, size];
}
