import { useCallback, useState } from 'react';
/**
 * Custom hook for managing a key-value map state with setter actions.
 * @template K - The type of keys in the map.
 * @template V - The type of values in the map.
 * @param {MapOrEntries<K, V>} [initialState] - The initial state of the map as a Map or an array of key-value pairs (optional).
 * @returns {Return<K, V>} A tuple containing the map state and actions to interact with the map.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-map)
 * @example
 * const [map, mapActions] = useMap();
 * // Access the `map` state and use `mapActions` to set, remove, or reset entries.
 */
export function useMap(initialState = new Map()) {
    const [map, setMap] = useState(new Map(initialState));
    const actions = {
        set: useCallback((key, value) => {
            setMap(prev => {
                const copy = new Map(prev);
                copy.set(key, value);
                return copy;
            });
        }, []),
        setAll: useCallback(entries => {
            setMap(() => new Map(entries));
        }, []),
        remove: useCallback(key => {
            setMap(prev => {
                const copy = new Map(prev);
                copy.delete(key);
                return copy;
            });
        }, []),
        reset: useCallback(() => {
            setMap(() => new Map());
        }, []),
    };
    return [map, actions];
}
