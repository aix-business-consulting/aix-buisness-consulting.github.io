import { useLocalStorage } from '../useLocalStorage';
import { useMediaQuery } from '../useMediaQuery';
const COLOR_SCHEME_QUERY = '(prefers-color-scheme: dark)';
const LOCAL_STORAGE_KEY = 'usehooks-ts-ternary-dark-mode';
/**
 * Custom hook for managing ternary (system, dark, light) dark mode with local storage support.
 * @param {?TernaryDarkModeOptions | string} [options] - Options or the local storage key for the hook.
 * @param {?string} [options.localStorageKey] - The key for storing dark mode preference in local storage (default is `'usehooks-ts-ternary-dark-mode'`).
 * @param {?TernaryDarkMode} [options.defaultValue] - The default value for the dark mode (default is `'system'`).
 * @param {?boolean} [options.initializeWithValue] - If `true` (default), the hook will initialize reading `localStorage`. In SSR, you should set it to `false`, returning `undefined` initially.
 * @returns {ReturnedMethods & Partial<ReturnedValues>} An object containing the dark mode state and helper functions.
 * @see [Documentation](https://usehooks-ts.com/react-hook/use-ternary-dark-mode)
 * @example
 * const { isDarkMode, ternaryDarkMode, setTernaryDarkMode, toggleTernaryDarkMode } = useTernaryDarkMode({ defaultValue: 'dark' });
 * // Access and use the dark mode state and provided helper functions.
 */
export function useTernaryDarkMode(options) {
    var _a, _b, _c;
    // TODO: Refactor this code after the deprecated signature has been removed.
    const defaultValue = typeof options === 'string' ? 'system' : (_a = options === null || options === void 0 ? void 0 : options.defaultValue) !== null && _a !== void 0 ? _a : 'system';
    const localStorageKey = typeof options === 'string'
        ? options
        : (_b = options === null || options === void 0 ? void 0 : options.localStorageKey) !== null && _b !== void 0 ? _b : LOCAL_STORAGE_KEY;
    const initializeWithValue = typeof options === 'string'
        ? undefined
        : (_c = options === null || options === void 0 ? void 0 : options.initializeWithValue) !== null && _c !== void 0 ? _c : undefined;
    const isDarkOS = useMediaQuery(COLOR_SCHEME_QUERY);
    const [mode, setMode] = useLocalStorage(localStorageKey, defaultValue, {
        initializeWithValue,
    });
    const isDarkMode = mode === 'dark' || (mode === 'system' && isDarkOS);
    const toggleTernaryDarkMode = () => {
        const modes = ['light', 'system', 'dark'];
        setMode(prevMode => {
            return modes[(modes.indexOf(prevMode) + 1) % modes.length];
        });
    };
    return {
        isDarkMode,
        ternaryDarkMode: mode,
        setTernaryDarkMode: setMode,
        toggleTernaryDarkMode,
    };
}
